# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Anthony Su 
Student ID: 803912902
Email: anthonysu@ucla.edu

# Partner 2 (if you're working in a team)
Name: Stanley Xu
Student ID: 803928875
Email: stanley.xu@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We used fork to run concurrent processes that process downloads and uploads.
We allow for uploads and downloads to run simultaneously. One issue that was
causing problems but we fixed was to make sure the parent/child close the
socket connections they do not use. 

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

1. In task_upload, it is possible that the peer request fills up t->buf larger
than what gets stored in t->filename by osp2p_snscanf. This will cause the
t->filename buffer to overflow. An attack we saw that exploited this in make
run-bad was 4000 'x's in a filename. At a high level, we fix this by checking 
the length of the t->buf and returning an error if it is too large.

2. It is possible that a filename requested by download or upload exceeds 
FILENAMESIZ. The given code uses strcpy, which does not check bounds/sizes.
To fix this, we do a simple strlen check in functions using strcpy.


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

1. We fixed the bug where a peer can request a file not in our current directory
and download it. An attack that exploited this was requests for 
'../GNUMakeFile' and '/etc/passwd'. We fix this by checking the 
filename and that its inode appears in the current directory.

2. There may be a security bug if the request is for a symlink. We do this
by checking that requests are for regular files.

3. Other peer may hog up resources by filling up our peer's disk. We fix this
by limiting download size to 100MB (see #define MAXFILESIZ).

4. The bad peer may take very long to upload (4 bytes every 10 seconds). 
We fix this by checking whether the peer is uploading 4 bytes at a time 
and just taking up too much time (10 buf reads and < 50 bytes), 
in which case we terminate the download.

5. The bad peer will download from us (we upload) but when we call
read_to_taskbuf to get the request, the read call will hang forever.
We think this is because they set up a fd on their end that never sends
data nor reaches EOF (maybe they redirected stdin to the fd via dup2, or
used a pipe that never gets closed).

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

1. We exploited the buffer overrun bug in the skeleton code that we fixed
in EXERCISE 2B. This is when a downloader requests a filename that exceeds
255 characters. Because task_upload scanf's from t->buf of size TASKBUFSIZ
to t->filename of size FILENAMESIZ, it's possible to overrun the t->filename
buffer. We accomplish this by passing in a 4000 length filename into the
request 'osp2p_writef(t->peer_fd, "GET %s OSP2P\n", evil_filename);' in 
task_download. This is an attack because it overruns pass the buffer size
of t->filename into other memory. 

2. We executed a denial of service attack by sending infinite bytes to other
downloaders, monopolizing their disk space. When a downloader requests for a
file, we just infinitely write to their peer_fd 4096 bytes at a time. Because the 
skeleton code doesn't check if the file size is too large, it will just 
keep writing to its local file until disk space is no more. This is an attack
because it denies them resources (disk space) as well as other peers from connecting to
it because the skeleton code has to concurrency.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
